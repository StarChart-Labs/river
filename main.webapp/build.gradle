apply plugin: 'application'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.grunt'

mainClassName = "org.starchartlabs.river.main.webapp.River"

//Dependency versions managed in $rootDir/dependencies.lock
dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    
    compile group: 'org.thymeleaf', name: 'thymeleaf'
    compile group: 'org.thymeleaf', name: 'thymeleaf-spring4'
    
    compile group: 'com.github.rjeschke', name: 'txtmark'
    
    compile group: 'com.google.code.findbugs', name: 'jsr305'
    compile group: 'com.google.guava', name: 'guava'
}

node {
    // Version of node to use.
    version = '6.11.1'

    // Version of npm to use.
    npmVersion = '3.10.10'
    
    // Version of Yarn to use.
    yarnVersion = '0.27.5'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

//Background task for grunt task type: see ${rootDir}/buildSrc/src/main/groovy/GruntAsync.groovy
task gruntDev(type: GruntAsync, dependsOn: yarn_install) {
    args = ['dev']
}

run {
	// Remove the "built" UI resources and use the sources instead, allowing viewing of changes without a restart
	classpath += files(sourceSets.main.resources.srcDirs)
	classpath -= files(sourceSets.main.output.resourcesDir)
}

clean.dependsOn yarn_cache_clean
build.dependsOn yarn_install, grunt_prod
run.dependsOn gruntDev

task stageDockerDependencies(dependsOn: jar) {
	mkdir "${buildDir}/staged"

	//Define the inputs and outputs, as we don't use the default copy properties
	//Use build.gradle as input for configuration copies
	inputs.files configurations.runtime
	inputs.files jar
	
	outputs.dir "${buildDir}/staged"
	
	doLast{		
		//Application staging
		copy {
			into "${buildDir}/staged/libs"
			from configurations.runtime
		}
		copy {
			into "${buildDir}/staged/libs"
			from jar
		}
	}
}

