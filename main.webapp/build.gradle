plugins { 
	id "org.asciidoctor.convert" version "1.5.6"
}

apply plugin: 'application'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.grunt'
apply plugin: 'org.starchartlabs.flare.docker-build'

mainClassName = "org.starchartlabs.river.main.webapp.River"

sourceSets {
    docker {}
}

//Dependency versions managed in $rootDir/dependencies.lock
dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    
    compile group: 'org.thymeleaf', name: 'thymeleaf'
    compile group: 'org.thymeleaf', name: 'thymeleaf-spring5'
    
    compile group: 'com.github.rjeschke', name: 'txtmark'
    
    compile group: 'com.google.code.findbugs', name: 'jsr305'
    compile group: 'com.google.guava', name: 'guava'
    
    asciidoctor group: 'org.springframework.restdocs', name: 'spring-restdocs-asciidoctor'
	testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'
	
	testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
		exclude group: 'junit', module: 'junit;'
	}
	
    testCompile group: 'org.testng', name: 'testng'
}

ext { 
	snippetsDir = file('build/generated-snippets')
}

test { 
	useTestNG()
	outputs.dir snippetsDir
}

asciidoctor { 
	inputs.dir snippetsDir 
	dependsOn test
	attributes 'stylesheet': 'docs.css'
}

node {
    // Version of node to use.
    version = '6.11.1'

    // Version of npm to use.
    npmVersion = '3.10.10'
    
    // Version of Yarn to use.
    yarnVersion = '0.27.5'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

task copyDocs(type: Copy) {
	dependsOn asciidoctor 
	from "${asciidoctor.outputDir}/html5"
	into "${projectDir}/src/main/resources/static/docs"
}

containers{
    main{
        baseName='starchart-labs/river'
        contents{
          from ( sourceSets.docker.resources ) { into '' }
          from (configurations.runtime) { into 'libs' }
          from (jar) { into 'libs' }
        }
    }
}

//Background task for grunt task type: see ${rootDir}/buildSrc/src/main/groovy/GruntAsync.groovy
task gruntDev(type: GruntAsync, dependsOn: yarn_install) {
    args = ['dev']
}

run {	
	// Remove the "built" UI resources and use the sources instead, allowing viewing of changes without a restart
	classpath += files(sourceSets.main.resources.srcDirs)
	classpath -= files(sourceSets.main.output.resourcesDir)
}

clean.dependsOn yarn_cache_clean
build.dependsOn yarn_install, grunt_prod
run.dependsOn gruntDev, copyDocs